name: PDI Kernel

on:
  workflow_dispatch:
    inputs:
      ksu_type:
        description: 'Choose KSU variant'
        required: true
        default: 'nonksu'
        type: choice
        options:
          - nonksu
          - ksu
          - ksu-susfs
          - ksun
          - ksun-susfs
      release:
        description: 'Create GitHub release?'
        required: true
        default: 'false'
        type: choice
        options:
          - true
          - false

permissions:
  contents: write

jobs:
  build-pdi:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        kernel_branch:
          - android15-6.6-lts
          - android14-6.1-lts
          - android14-5.15-lts
          - android13-5.15-lts
          - android13-5.10-lts
          - android12-5.10-lts

    name: Build ${{ matrix.kernel_branch }} - ${{ inputs.ksu_type }}

    steps:
      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Free up space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/hostedtoolcache

      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache

      - name: Set up ccache
        run: |
          mkdir -p ~/.ccache
          ccache --version
          ccache --max-size=2G
          ccache --set-config=compression=true
          echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4.2.3
        with:
          path: |
            ~/.ccache
          key: ${{ matrix.kernel_branch }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.kernel_branch }}-

      - name: Install latest repo tool
        run: |
          mkdir -p ~/bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo -o ~/bin/repo
          chmod +x ~/bin/repo
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Setup kernel ${{ matrix.kernel_branch }}
        run: |
          mkdir ${{ matrix.kernel_branch }}
          cd ${{ matrix.kernel_branch }}
          repo init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${{ matrix.kernel_branch }}
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${{ matrix.kernel_branch }})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i 's/"${{ matrix.kernel_branch }}"/"deprecated\/${{ matrix.kernel_branch }}"/g' $DEFAULT_MANIFEST_PATH
            cat $DEFAULT_MANIFEST_PATH
          fi
          repo --version
          repo --trace sync -c -j$(nproc --all) --no-tags
          echo "KERNEL_DIRE=${{ matrix.kernel_branch }}" >> $GITHUB_ENV

      - name: Kernel version
        run: |
          cd $KERNEL_DIRE
          if [ -f "build/build.sh" ]; then
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' ./common/BUILD.bazel
            rm -rf ./common/android/abi_gki_protected_exports_*
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          fi
          cd common
          KERNEL_VERSION=$(make kernelversion)
          echo "$KERNEL_VERSION"
          kerver="${{ matrix.kernel_branch }}"
          kerver="${kerver/-lts/}"
          echo "KERVER=$kerver" >> $GITHUB_ENV
          echo "FULLVER=$kerver.${KERNEL_VERSION##*.}" >> $GITHUB_ENV

      - name: Setup KSU
        if: ${{ inputs.ksu_type != 'nonksu' }}
        run: |
          cd $KERNEL_DIRE/common
          sed -i 's/check_defconfig//' ./build.config.gki
          rm -rf KernelSU KernelSU-Next drivers/kernelsu
          if [ "${{ inputs.ksu_type }}" = "ksu" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
            echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
            echo "SUVER=-KSU" >> $GITHUB_ENV
          elif [ "${{ inputs.ksu_type }}" = "ksu-susfs" ]; then
            curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s main
            echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
            echo "SUVER=-KSU-SUSFS" >> $GITHUB_ENV
          elif [ "${{ inputs.ksu_type }}" = "ksun" ]; then
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
            echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
            echo "SUVER=-KSUN" >> $GITHUB_ENV
          elif [ "${{ inputs.ksu_type }}" = "ksun-susfs" ]; then
            curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
            echo "CONFIG_KSU=y" >> ./arch/arm64/configs/gki_defconfig
            echo "SUVER=-KSUN-SUSFS" >> $GITHUB_ENV
          fi

      - name: Setup KSU SUSFS
        if: ${{ inputs.ksu_type == 'ksu-susfs' || inputs.ksu_type == 'ksun-susfs' }}
        run: |
          cd $KERNEL_DIRE/common
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.KERVER }}
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.KERVER }}.patch ./
          cp ./susfs4ksu/kernel_patches/fs/* ./fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          patch -p1 < 50_add_susfs_in_gki-${{ env.KERVER }}.patch
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=y" >> ./arch/arm64/configs/gki_defconfig
          curl -Ls https://raw.githubusercontent.com/WildKernels/kernel_patches/main/69_hide_stuff.patch | patch -p1
          if [ "${{ inputs.ksu_type }}" = "ksu-susfs" ]; then
            patch -p1 < $GITHUB_WORKSPACE/0001-kernel-patch-susfs-to-KernelSU.patch
          elif [ "${{ inputs.ksu_type }}" = "ksun-susfs" ]; then
            patch -p1 < $GITHUB_WORKSPACE/0001-kernel-patch-susfs-to-KernelSU-Next.patch
          fi

      - name: Setup Extra
        run: |
          cd $KERNEL_DIRE/common
          echo "CONFIG_BUILD_ARM64_KERNEL_COMPRESSION_GZIP=y" >> ./arch/arm64/configs/gki_defconfig

      - name: Build Kernel ${{ env.KVER }}
        run: |
          set -e
          cd $KERNEL_DIRE
          export KBUILD_BUILD_HOST=GitHub
          export KBUILD_BUILD_USER=Norikimika
          if [ -f "build/build.sh" ]; then
            LTO=thin BUILD_CONFIG=common/build.config.gki.aarch64 build/build.sh CC="/usr/bin/ccache clang"
          else
            tools/bazel build --disk_cache=$CCACHE_DIR/bazel --config=fast --lto=thin --action_env=KBUILD_BUILD_USER --action_env=KBUILD_BUILD_HOST //common:kernel_aarch64_dist
          fi

      - name: Pack Anykernel3
        run: |
          git clone --recursive --depth=1 -j $(nproc) --branch master https://github.com/Kernel-SU/AnyKernel3 AnyKernel3
          sed -i "s|^kernel\.string=.*|kernel.string=PDI $FULLVER Kernel|" AnyKernel3/anykernel.sh
          if [ -e "$KERNEL_DIRE/bazel-bin/common/kernel_aarch64/Image.gz" ]; then
            cp -f $KERNEL_DIRE/bazel-bin/common/kernel_aarch64/Image.gz ./AnyKernel3/
          elif [ -e "$KERNEL_DIRE/bazel-bin/common/kernel_aarch64/Image" ]; then
            cp -f $KERNEL_DIRE/bazel-bin/common/kernel_aarch64/Image ./AnyKernel3/
          elif [ -e "$KERNEL_DIRE/out/${{ env.KERVER }}/dist/Image.gz" ]; then
            cp -f $KERNEL_DIRE/out/${{ env.KERVER }}/dist/Image.gz ./AnyKernel3/
          elif [ -e "$KERNEL_DIRE/out/${{ env.KERVER }}/dist/Image" ]; then
            cp -f $KERNEL_DIRE/out/${{ env.KERVER }}/dist/Image ./AnyKernel3/
          fi
          cd AnyKernel3/
          rm -rf LICENSE
          zip -q -r "PDI-${{ env.FULLVER }}${{ env.SUVER }}" *

      - name: Upload AnyKernel3
        uses: actions/upload-artifact@v4.6.2
        with:
          name: "PDI-${{ env.FULLVER }}${{ env.SUVER }}"
          path: AnyKernel3/*
          retention-days: 7

  release:
    needs: build-pdi
    runs-on: ubuntu-latest
    if: ${{ inputs.release == 'true' }}
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4.3.0
        with:
          path: ./AnyKernel3

      - name: Create Release
        uses: softprops/action-gh-release@v2.2.2
        with:
          name: "PDI Kernel Release - ${{ github.run_number }}"
          tag_name: "pdi-${{ github.run_number }}"
          body: |
            KernelSU Variant: `${{ inputs.ksu_type }}`
            Build Number: `${{ github.run_number }}`
            Date: `${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}`
          files: |
            ./AnyKernel3/**/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
